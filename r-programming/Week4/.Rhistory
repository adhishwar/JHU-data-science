length(unique(mtcars$disp))
length(mtcars_disp)
summary(mtcars)
str(mtcars)
mpgMean_by_cyl<-tapply(mtcars$mpg,mtcars$cyl,mean)
mpgMean_by_cyl
qscMean_by_cyl<-tapply(mtcars$qsec,mtcars$cyl,mean)
qscMean_by_cyl
'hi'*12
a<-rep('hi',12)
a
rm(a)
cor(mpgMean_by_cyl,qscMean_by_cyl)
cor(mtcars$gear,mtcars$mpg)
cor(1,12)
a<-12
b<-1
cor(a,b)
a<-1:2
b<-4:3
cor(a,b)
rm(a,b)
mtcars_disp
length(mtcars_disp)
mpgMean_by_cyl
qscMean_by_cyl
rm(list=ls())
rm(list=ls())
getwd()
getwd('coursera/datscience/jhu-specialisation/r-programming')
setwd('coursera/datscience/jhu-specialisation/r-programming')
setwd('coursera/datscience/JHU-specialisation/r-programming')
setwd('coursera/datascience/JHU-specialisation/r-programming')
setwd('coursera/datascience/JHU_specialisation/r-programming')
dir()
rep(1:3,5)
rep(1:3,5,each=TRUE)
mapply(rep,1:3,4)
mapply(rep,1:3,4,SIMPLIFY = TRUE)
as.vector(mapply(rep,1:3,4,SIMPLIFY = TRUE))
rep(1:3,each=5)
rep(1:15,each=3)
days_factot<-as.factor(rep(1:15,each=3))
days_factot
table(days_factot)
rm(days_factot)
getwd()
dir()
dir<-dir()[9]
dir
outcome <- read.csv(dir+"outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv(paste(dir,"outcome-of-care-measures.csv"), colClasses = "character")
?paste
outcome <- read.csv(paste(dir,"/outcome-of-care-measures.csv"), colClasses = "character")
outcome <- read.csv(paste(dir,"/outcome-of-care-measures.csv",sep=''), colClasses = "character")
nrow(outcome)
ncol(outcome)
head(outcome)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[, 11])
names(outcome)
a<-function(){}
l<-list()
l[1]<-a
class9a
class()
class(a)
class(x)
class(l)
rm9a,l
rm(a,l)
rm(dir)
names(outcome)
nrow(outcome)
ncol(outcome)
no_of_complete_records<-sum(complete.cases(outcome))
no_of_complete_records
NULL
x<-NULL
x
class(x)
x+10
x+'a'
paste(x,'we')
paste(x,'we',spe='')
paste(x,'we',sep='')
names(outocme)
no_of_complete_records
get <- function() x
get
get(10)
get()
x<-10
get()
getwd()
setwd('/week4')
dir()
setwd('Week4')
dir()
setwd(dir()[2])
dir()
getwd()
setwd('../')
getwd()
dir()
rm(get)
no_of_complete_records
x
rm(x)
install.packages('flexdashboard')
install.packages("devtools")
devtools::install_github("gaborcsardi/notifier")
notify(
title = "Here goes the Title",
msg = c("Hello","World")
)
library(notifier)
notify(
title = "Here goes the Title",
msg = c("Hello","World")
)
notify(
title = "Here goes the Title",
msg = c("Hello","World")
)
notify(
title = "Here goes the Title",
msg = c("Hello","World")
)notify(
title = "Here goes the Title",
msg = c("Hello","World")
)
notify(
title = "Here goes the Title",
msg = c("Hello","World")
)
notify('hi')
notify(
title = "World Clock",
msg = c(paste0(" India - ", format(Sys.time(), format = "%H:%M:%S" ,tz = "Asia/Calcutta"),"\n",
paste0("Singapore - ", format(Sys.time(), format = "%H:%M:%S" ,tz = "Asia/Singapore"),"\n"))
)
)
?alarm
alarm()
alarm()
alarm
?cat
alarm()
alarm()
alarm()
install.packages("beepr")
library(beepr)
beep()
beep(10)
beep(12)
?beep
beep(12,notify('HI'))
beep(12,notify('HI'))
beep(3,notify('HI'))
beep(4,notify('HI'))
beep(5,notify('HI'))
beep(6,notify('HI'))
beep(7,notify('HI'))
beep(8,notify('HI'))
beep(9,notify('HI'))
beep(10,notify('HI'))
beep(11,notify('HI'))
beep(12,notify('HI'))
rm(msg)
system("say Just finished!")
system("Program execution done !")
system("say Program execution done !")
?system
system("say Program execution done ?")
system("say R has finished")
getwd()
setwd(../Week2)
setwd('../Week2')
dir()
source(complete.R)
source('complete.R')
complete
complete<-edit('complete.R')
complete<-edit('complete')
complete<-edit('complete(')
complete<-edit('complete()')
complete
source('complete.R')
complete()
complete
fix(complete)
complete
fix(complete)
rm(complete)
a <- matrix(c(1,3,2,5),ncol=2)
a
a <- matrix(c(1,3,2,5),ncol=2,byrow = T)
a
solve(a)
b <- solve(a)
a
b
a%*%b
c <- matrix(c(5,-2,-2,1),ncol = 2,byrow = T)
c
a%*%c
?solve
rm(a,b,c)
source('~/coursera/datascience/JHU_specialisation/r-programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(c(1,3,2,5),ncol = 2,byrow = T))
cacheSolve(x)
x<-makeCacheMatrix(matrix(c(1,3,2,5),ncol = 2,byrow = T))
cacheSolve(x)
cacheSolve(x)
source('~/coursera/datascience/JHU_specialisation/r-programming/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(matrix(c(1,3,2,5),ncol = 2,byrow = T))
cacheSolve(x)
cacheSolve(x)
length('bda09ed7a13eee89e754f35911fd274d99dee0a8')
seq_along('bda09ed7a13eee89e754f35911fd274d99dee0a8')
seq_len(10)
seq_len(x)
seq_len(no_of_complete_records)
no_of_complete_records
?seq_along
?solve
source('~/.active-rstudio-document')
cacheSolve
x <- makeCacheMatrix(matrix(c(1,3,2,5),ncol = 2,byrow = T))
cacheSolve(x)
cacheSolve(x)
install.packages("rmarkdown")
names(outcome)
no_of_complete_records
class(outcome[,11])
str(outcome)
data_for_best <- outcome[,c(2,7,11,17,23)]
str(data_for_best)
head(data_for_best)
head(data_for_best,3)
possible_outcomes <- c('heart failure','heart attack','pneumonia')
x <- 'pneumonia'
if(x in possible_outcomes){}
if(x in possible_outcomes) print('hi')
if(x %in% possible_outcomes) print('hi')
x <- 'pneumoni'
if(x %in% possible_outcomes) print('hi')
rm(x)
View(outcome)
View(outcome)
outcome[,'State']<-as.factor(outcome[,'State'])
> data_for_best <- outcome[,c(2,7,11,17,23)]
data_for_best <- outcome[,c(2,7,11,17,23)]
str(data_for_best)
levels(data_for_best[,'State'])
?stop
stop('hi')
dir()
setwd('../')
dir()
setwd('week4')
dir()
setwd(dir()[3])
dir()
setwd('../')
dir()
split(data_for_best,possible_outcomes)
outcome_based_splitting_of_best <- split(data_for_best,possible_outcomes)
names(outcome_based_splitting_of_best)
names(data_for_best)
str(outcome_based_splitting_of_best)
rm(outcome_based_splitting_of_best)
rm(cacheSolve,makeCacheMatrix())
rm(cacheSolve,makeCacheMatrix
)
state_based
state_based_split_of_data <- split(data_for_best,state)
state_based_split_of_data <- split(data_for_best,State)
state_based_split_of_data <- split(data_for_best,'State')
str(state_based_split_of_data)
state_based_split_of_data <- split(data_for_best,data_for_best$State)
str(state_based_split_of_data)
names(state_based_split_of_data)
length(names(state_based_split_of_data))
rm(state_based_split_of_data)
state <- 'AL'
if(!state %in% data_for_best[,'State'])
stop('invalid state')
state <- 'IJ'
if(!state %in% data_for_best[,'State'])
stop('invalid state')
names(data_for_best)
max(data_for_best[,])
max(data_for_best[,'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'])
max(data_for_best[,'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'],rm.na=T)
data_for_best[,'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'] <- as.numeric(data_for_best[,'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'])
max(data_for_best[,'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'])
str(data_for_best)
str(data_for_best)
data_for_best <- split(data_for_best,data_for_best$State)
str(data_for_best)
names(data_for_best)
lapply(datafor, function)
data_for_best <- lapply(data_for_best, function(l) order(l['Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack',]))
View(data_for_best)
View(data_for_best)
data_for_best['FL']
data_for_best <- outcome[,c(2,7,11,17,23)]
names(data_for_best)
fields <- names(data_for_best)
fields
data_for_best <- split(data_for_best,data_for_best$State)
data_for_best['AL']
length(data_for_best['AL'])
class(data_for_best['AL'])
data_for_best[3] <- as.numeric(data_for_best[3])
class(data_for_best['AL'])
str(data_for_best)
class(data_for_best$AL)
class(data_for_best[['AL']])
data_for_best$AL[3]
data_for_best$AL[3] <- as.numeric(data_for_best$AL[3])
data_for_best$AL[3] <- as.numeric(data_for_best$AL[[3]])
data_for_best$AL[3]
data_for_best$AL[3] <- as.numeric(data_for_best$AL[[4]])
data_for_best$AL[3] <- as.numeric(data_for_best$AL[[5]])
data_for_best$AL[4]
data_for_best <- outcome[,c(2,7,11,17,23)]
data_for_best <- split(data_for_best,data_for_best$State)
data_for_best$AL[3] <- as.numeric(data_for_best$AL[[3]])
data_for_best$AL[4] <- as.numeric(data_for_best$AL[[4]])
data_for_best$AL[5] <- as.numeric(data_for_best$AL[[5]])
data_for_best$AL[4]
data_for_best$AL[5]
str(data_for_best)
possible_outcomes <- c('heart failure','heart attack','pneumonia')
data_for_best <- outcome[,c(2,7,11,17,23)]
data_for_best[[3]] <- as.numeric(data_for_best[[3]])
data_for_best[[4]] <- as.numeric(data_for_best[[4]])
data_for_best[[5]] <- as.numeric(data_for_best[[5]])
str(data_for_best)
data_for_best <- outcome[,c(2,7,11,17,23)]
for(i in c(3,4,5))
{}
for(i in c(3,4,5))
{
data_for_best[[i]] <- as.numeric(data_for_best[[i]])
}
> data_for_best <- outcome[,c(2,7,11,17,23)]
data_for_best <- outcome[,c(2,7,11,17,23)]
str(data_for_best)
for(i in c(3,4,5))
{
data_for_best[[i]] <- as.numeric(data_for_best[[i]])
}
str(data_for_best)
data_for_best <- split(data_for_best,data_for_best$State)
str(data_for_best)
lapply(data_for_best,class)
View(data_for_best)
class(data_for_best[,'State'])
?match
match('heart attack',possible_outcomes)
possible_outcomes <- c('heart attack','heart failure','pneumonia')
match('heart attack',possible_outcomes)
match('heart ',possible_outcomes)
out <- 'heart f'
pos <- match(out,possible_outcomes)
if(is.na(pos))
stop('invalid outcome')
out <- 'heart failure'
pos <- match(out,possible_outcomes)
if(is.na(pos))
stop('invalid outcome')
utcome <- read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses = 'character')
str(utcome)
rm(utcome)
str(data_for_best)
state_specific_data <- data_for_best[[state]]
str(state_specific_data)
state <- 'AL'
state_specific_data <- data_for_best[[state]]
state_specific_data
?order
class(state_specific_data)
range(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
?range
range(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = T)
range(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = T)[2]
range(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = T)[1]
state_specific_data[[which(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==range(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = T)[1])]]
low <- range(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = T)[1]
low
state_specific_data[which(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==low)]
state_specific_data[which(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==low),]
class(state_specific_data[which(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==low),])
state_specific_data[which(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==low),][1]
state_specific_data[which(state_specific_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==low),][[1]]
state
state_specific_data
order(state_specific_data[[pos]])
pos
order(state_specific_data[[pos+2]])
state_specific_data[order(state_specific_data[[pos+2]]),]
state_specific_data[order(state_specific_data[[pos+2]],state_specific_data[[2]]),]
fields
?fix
fix(fields)
'''
kcxl
print("hi)
'''
'''
print('hi)
'''
print('hi)
'''
pos
}
'''
pos
pos <- 1
state_specific_data[order(state_specific_data[[pos+2]])]
state_specific_data[order(state_specific_data[pos+2])]
state_specific_data[order(state_specific_data[pos+2]),]
state_specific_data <- state_specific_data[order(state_specific_data[pos+2]),]
req_hospital_name <- state_specific_data[1,1]
req_hospital_name
tate_specific_data <- state_specific_data[order(state_specific_data[pos+2],state_specific_data[1]),]
identical(state_specific_data,tate_specific_data)
View(state_specific_data)
View(state_specific_data)
View(tate_specific_data)
tate_specific_data <- state_specific_data[order(state_specific_data[pos+2],-state_specific_data[1]),]
?order
tate_specific_data <- state_specific_data[order(state_specific_data[pos+2],-state_specific_data[1],decreasing = c(F,T)),]
tate_specific_data <- state_specific_data[order(state_specific_data[pos+2],state_specific_data[1],decreasing = c(F,T)),]
tate_specific_data
View(tate_specific_data)
View(state_specific_data)
state_specific_data <- state_specific_data[order(state_specific_data[pos+2],state_specific_data[1]),]
View(state_specific_data)
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/best.R')
rm(list=ls())
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
getwd()
paste(getwd(),'/state-outcome-based-ranking.R',sep = '')
setwd('/Users/adhishwar/coursera/datascience/JHU_specialisation/r-programming/Week4/state-outcome-based-ranking.R')
source('/Users/adhishwar/coursera/datascience/JHU_specialisation/r-programming/Week4/state-outcome-based-ranking.R')
traceback()
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/best.R')
rank <- 'worst'
if(rank=='worst')
print('yes')
if(rank=='as')
print('yes')
if(rank=='worst')
rank <- 1
rank
class(rank)
rm(list=ls())
source(best.R)
source('best.R')
best("MD", "pneumonia")
debug(best)
best("MD", "pneumonia")
best("MD", "pneumonia")
undebug(best)
best("MD", "pneumonia")
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/state-outcome-based-ranking.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/best.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/state-outcome-based-ranking.R')
best("MD", "pneumonia")
best("MD", "pneumonia")
?eval
parent.frame()
undebug(best)
undebug(state-outcome-based-ranking)
func <- function(a,b)
{
print('hi')
}
func()
?undebug
rm(list=ls())
source('/Users/adhishwar/coursera/datascience/JHU_specialisation/r-programming/Week4/state-outcome-based-ranking.R')
?read.csv
getwd()
dir()
sir <- paste(dir()[3],'/outcome-of-care-measures.csv',sep = '')
outcome <- read.csv(sir)
outcome <- outcome[complete.cases(outcome)]
outcome
outcome <- outcome[complete.cases(outcome),]
outcome
sir <- paste(dir()[3],'/outcome-of-care-measures.csv',sep = '')
outcome <- read.csv(sir)
outcome <- outcome[complete.cases(outcome),]
outcome
sir <- paste(dir()[3],'/outcome-of-care-measures.csv',sep = '')
outcome <- read.csv(sir)
complete.cases(outcome)
sum(complete.cases(outcome))
View(outcome)
rm(list = ls())
