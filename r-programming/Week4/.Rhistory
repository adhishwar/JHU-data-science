library(datasets)
data(mtcars)
split(mtcars,mtcars$cyl)
a<-split(mtcars,mtcars$cyl)
a
a[1]
a[2]
rm(a)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
rm(mtcars)
load(mtcars)
library('datasets')
load(mtcars)
load('mtcaes')
load('mtcars')
data(mtcars)
mtcars
str(mtcars)
class(mtcars)
str_mtcars<-str(mtcars)
str_mtcars
rm(str_mtcars)
head(mtcars)
head_mtcars<-head(mtcars)
head_mtcars
head(head_mtcars)
class(head_mtcars)
rm(head_mtcars)
split(mtcars)
split(mtcars,3)
str(split(mtcars,3))
split(mtcars,3)
split(mtcars,mtcars$cyl)
mtcasrs_gearsplit(mtcars,mtcars$gear)
mtcasrs_gear<-split(mtcars,mtcars$gear)
mtcasrs_gear
rm(mtcasrs_gear)
mtcars_disp<-split(mtcars,mtcars$disp)
mtcars_disp
str(mtcars_disp)
summary(mtcars_disp)
unique(mtcars$disp)
length(unique(mtcars$disp))
length(mtcars_disp)
summary(mtcars)
str(mtcars)
mpgMean_by_cyl<-tapply(mtcars$mpg,mtcars$cyl,mean)
mpgMean_by_cyl
qscMean_by_cyl<-tapply(mtcars$qsec,mtcars$cyl,mean)
qscMean_by_cyl
'hi'*12
a<-rep('hi',12)
a
rm(a)
cor(mpgMean_by_cyl,qscMean_by_cyl)
cor(mtcars$gear,mtcars$mpg)
cor(1,12)
a<-12
b<-1
cor(a,b)
a<-1:2
b<-4:3
cor(a,b)
rm(a,b)
mtcars_disp
length(mtcars_disp)
mpgMean_by_cyl
qscMean_by_cyl
rm(list=ls())
rm(list=ls())
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
rank <- 20
out <- 'heart attack'
possible_outcomes <- c('heart attack','heart failure','pneumonia')
#checks if the value of and out correspond to valid outcomes
pos <- match(out,possible_outcomes)
if(is.na(pos))
stop('invalid outcome')
if(pos==1){ col <- 11
} else if(pos==2) { col <- 17
} else if(pos==3) { col <- 23
}
#reads the data from the csv file
outcome <- read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses = 'character',na.strings='Not Available')
#takes out only the relevant columns for this task and stores in a seperate object
data_for_best <- outcome[,c(2,7,col)]
rm(outcome,col,possible_outcomes,pos)
#converts columns 3,4,5 into numeric type
data_for_best[,3] <- as.numeric(data_for_best[,3])
#splits the data_for_best variable based on the values of the State variable. So now it is a list of 54 data frames
data_for_best <- split(data_for_best,data_for_best$State)
#omits all the rows that have an NA value in them in all of the  54 state wise sorted data frames
no_na_data <- lapply( data_for_best , na.omit)
rm(data_for_best)
decreasing <- FALSE
if(rank=='best')
rank <- 1
if(rank=='worst')
{
decreasing <- TRUE
rank <- 1
}
output_data <- data.frame(name=character(),state=character())
temp <- function(df)
{
df <- df[order(df[,3],df[,1], decreasing = c(decreasing,F)),]
l <- list(df[rank,1],df[1,1])
l
}
append_to_df <- function(l)
{
output_data <- rbind(output_data,l)
}
item <- lapply(no_na_data , temp)
lapply(item, append_to_df)
getwd
getwd()
dir()
setwd(dir()[5])
dir()
setwd(dir()[2])
dir()
setwd(dir()[2])
dir()
setwd(dir()[1])
dir()
setwd(dir()[5])
possible_outcomes <- c('heart attack','heart failure','pneumonia')
#checks if the value of and out correspond to valid outcomes
pos <- match(out,possible_outcomes)
if(is.na(pos))
stop('invalid outcome')
if(pos==1){ col <- 11
} else if(pos==2) { col <- 17
} else if(pos==3) { col <- 23
}
#reads the data from the csv file
outcome <- read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses = 'character',na.strings='Not Available')
#takes out only the relevant columns for this task and stores in a seperate object
data_for_best <- outcome[,c(2,7,col)]
rm(outcome,col,possible_outcomes,pos)
#converts columns 3,4,5 into numeric type
data_for_best[,3] <- as.numeric(data_for_best[,3])
#splits the data_for_best variable based on the values of the State variable. So now it is a list of 54 data frames
data_for_best <- split(data_for_best,data_for_best$State)
#omits all the rows that have an NA value in them in all of the  54 state wise sorted data frames
no_na_data <- lapply( data_for_best , na.omit)
rm(data_for_best)
decreasing <- FALSE
if(rank=='best')
rank <- 1
if(rank=='worst')
{
decreasing <- TRUE
rank <- 1
}
output_data <- data.frame(name=character(),state=character())
temp <- function(df)
{
df <- df[order(df[,3],df[,1], decreasing = c(decreasing,F)),]
l <- list(df[rank,1],df[1,1])
l
}
append_to_df <- function(l)
{
output_data <- rbind(output_data,l)
}
item <- lapply(no_na_data , temp)
lapply(item, append_to_df)
output_data
str?by
?by
?do.call
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
possible_outcomes <- c('heart attack','heart failure','pneumonia')
#checks if the value of and out correspond to valid outcomes
pos <- match(out,possible_outcomes)
if(is.na(pos))
stop('invalid outcome')
if(pos==1){ col <- 11
} else if(pos==2) { col <- 17
} else if(pos==3) { col <- 23
}
#reads the data from the csv file
outcome <- read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses = 'character',na.strings='Not Available')
#takes out only the relevant columns for this task and stores in a seperate object
data_for_best <- outcome[,c(2,7,col)]
rm(outcome,col,possible_outcomes,pos)
#converts columns 3,4,5 into numeric type
data_for_best[,3] <- as.numeric(data_for_best[,3])
#splits the data_for_best variable based on the values of the State variable. So now it is a list of 54 data frames
data_for_best <- split(data_for_best,data_for_best$State)
#omits all the rows that have an NA value in them in all of the  54 state wise sorted data frames
no_na_data <- lapply( data_for_best , na.omit)
rm(data_for_best)
decreasing <- FALSE
if(rank=='best')
rank <- 1
if(rank=='worst')
{
decreasing <- TRUE
rank <- 1
}
output_data <- data.frame(name=character(),state=character())
temp <- function(df)
{
df <- df[order(df[,3],df[,1], decreasing = c(decreasing,F)),]
l <- list(df[rank,1],df[1,1])
l
}
# append_to_df <- function(l)
# {
#     output_data <- rbind(output_data,l)
# }
item <- lapply(no_na_data , temp)
# lapply(item, append_to_df)
str(item)
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
rm(list=ls()-c(out,rank))
rm(list=ls()
)
rank <- 20
out <- 'heart attack'
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
possible_outcomes <- c('heart attack','heart failure','pneumonia')
#checks if the value of and out correspond to valid outcomes
pos <- match(out,possible_outcomes)
if(is.na(pos))
stop('invalid outcome')
if(pos==1){ col <- 11
} else if(pos==2) { col <- 17
} else if(pos==3) { col <- 23
}
#reads the data from the csv file
outcome <- read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses = 'character',na.strings='Not Available')
#takes out only the relevant columns for this task and stores in a seperate object
data_for_best <- outcome[,c(2,7,col)]
rm(outcome,col,possible_outcomes,pos)
#converts columns 3,4,5 into numeric type
data_for_best[,3] <- as.numeric(data_for_best[,3])
#splits the data_for_best variable based on the values of the State variable. So now it is a list of 54 data frames
data_for_best <- split(data_for_best,data_for_best$State)
#omits all the rows that have an NA value in them in all of the  54 state wise sorted data frames
no_na_data <- lapply( data_for_best , na.omit)
rm(data_for_best)
decreasing <- FALSE
if(rank=='best')
rank <- 1
if(rank=='worst')
{
decreasing <- TRUE
rank <- 1
}
output_data <- data.frame(name=character(),state=character())
temp <- function(df)
{
df <- df[order(df[,3],df[,1], decreasing = c(decreasing,F)),]
# l <- list(df[rank,1],df[1,2])
data.frame(as.vector(df[rank,1]),as.vector(df[1,2]))
}
# append_to_df <- function(l)
# {
#     output_data <- rbind(output_data,l)
# }
item <- lapply(no_na_data , temp)
# lapply(item, append_to_df)
str(item)
item <- do.call('rbind',item)
str(item)
item
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
head(rankall("heart attack", 20), 10)
rm(output_data)
rm(temp)
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
tail(rankall("heart failure"), 10)
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
source('~/coursera/datascience/JHU_specialisation/r-programming/Week4/rankall.R')
rm(list=ls())
